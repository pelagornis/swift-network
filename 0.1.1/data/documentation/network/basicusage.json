{"hierarchy":{"paths":[["doc:\/\/Network\/documentation\/Network"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Network\/documentation\/Network\/BasicUsage"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Article","title":"Basic Usage","role":"article","modules":[{"name":"Network"}]},"kind":"article","abstract":[{"type":"text","text":"Learn the fundamental concepts and patterns for using Swift Network effectively."}],"variants":[{"paths":["\/documentation\/network\/basicusage"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide covers the essential patterns and concepts you’ll use most often with Swift Network, including endpoint creation, request modifiers, and error handling."}]},{"type":"heading","text":"Creating Endpoints","level":2,"anchor":"Creating-Endpoints"},{"type":"paragraph","inlineContent":[{"text":"Endpoints define your API endpoints using the ","type":"text"},{"code":"Endpoint","type":"codeVoice"},{"text":" protocol. Here are common patterns:","type":"text"}]},{"type":"heading","text":"Simple GET Request","level":3,"anchor":"Simple-GET-Request"},{"type":"codeListing","code":["struct UserEndpoint: Endpoint {","    let baseURL = URL(string: \"https:\/\/api.example.com\")!","    let path = \"\/users\"","    let method = Http.Method.get","    let task = Http.Task.requestPlain","    let headers = [Http.Header.accept(\"application\/json\")]","    let timeout: TimeInterval? = 30","}"],"syntax":"swift"},{"type":"heading","text":"POST Request with JSON Body","level":3,"anchor":"POST-Request-with-JSON-Body"},{"type":"codeListing","code":["struct CreateUserEndpoint: Endpoint {","    let baseURL = URL(string: \"https:\/\/api.example.com\")!","    let path = \"\/users\"","    let method = Http.Method.post","    let task: Http.Task","    let headers = [Http.Header.contentType(\"application\/json\")]","    let timeout: TimeInterval? = 30","    ","    init(user: CreateUserRequest) {","        self.task = Http.Task.requestJSON(user)","    }","}","","struct CreateUserRequest: Codable {","    let name: String","    let email: String","}"],"syntax":"swift"},{"type":"heading","text":"Parameterized Endpoint","level":3,"anchor":"Parameterized-Endpoint"},{"type":"codeListing","code":["struct UserDetailEndpoint: Endpoint {","    let baseURL = URL(string: \"https:\/\/api.example.com\")!","    let path: String","    let method = Http.Method.get","    let task = Http.Task.requestPlain","    let headers = [Http.Header.accept(\"application\/json\")]","    let timeout: TimeInterval? = 30","    ","    init(userId: Int) {","        self.path = \"\/users\/\\(userId)\"","    }","}"],"syntax":"swift"},{"type":"heading","text":"Using Request Modifiers","level":2,"anchor":"Using-Request-Modifiers"},{"type":"paragraph","inlineContent":[{"text":"Request modifiers allow you to dynamically modify requests:","type":"text"}]},{"type":"heading","text":"Adding Headers","level":3,"anchor":"Adding-Headers"},{"type":"codeListing","code":["let authModifier = HeaderModifier(key: \"Authorization\", value: \"Bearer \\(token)\")","let customModifier = HeaderModifier(key: \"X-Custom\", value: \"value\")","","let users: [User] = try await provider.request(","    UserEndpoint(), ","    as: [User].self, ","    modifiers: [authModifier, customModifier]",")"],"syntax":"swift"},{"type":"heading","text":"Setting Timeout","level":3,"anchor":"Setting-Timeout"},{"type":"codeListing","code":["let timeoutModifier = TimeoutModifier(timeout: 60)","","let users: [User] = try await provider.request(","    UserEndpoint(), ","    as: [User].self, ","    modifiers: [timeoutModifier]",")"],"syntax":"swift"},{"type":"heading","text":"Multiple Modifiers","level":3,"anchor":"Multiple-Modifiers"},{"type":"codeListing","code":["let modifiers: [RequestModifier] = [","    HeaderModifier(key: \"Authorization\", value: \"Bearer \\(token)\"),","    TimeoutModifier(timeout: 60),","    CachePolicyModifier(policy: .reloadIgnoringLocalCacheData)","]","","let users: [User] = try await provider.request(","    UserEndpoint(), ","    as: [User].self, ","    modifiers: modifiers",")"],"syntax":"swift"},{"type":"heading","text":"Error Handling","level":2,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift Network provides comprehensive error handling:"}]},{"type":"heading","text":"Basic Error Handling","level":3,"anchor":"Basic-Error-Handling"},{"type":"codeListing","code":["do {","    let users: [User] = try await provider.request(UserEndpoint(), as: [User].self)","    \/\/ Handle success","} catch {","    \/\/ Handle error","    print(\"Request failed: \\(error)\")","}"],"syntax":"swift"},{"type":"heading","text":"Specific Error Types","level":3,"anchor":"Specific-Error-Types"},{"type":"codeListing","code":["do {","    let users: [User] = try await provider.request(UserEndpoint(), as: [User].self)","} catch NetworkError.serverError(let statusCode, let data) {","    print(\"Server error: \\(statusCode)\")","    \/\/ Handle server error","} catch NetworkError.requestFailed(let urlError) {","    print(\"Network error: \\(urlError.localizedDescription)\")","    \/\/ Handle network error","} catch NetworkError.decodingError(let error) {","    print(\"Decoding error: \\(error)\")","    \/\/ Handle decoding error","} catch {","    print(\"Unexpected error: \\(error)\")","}"],"syntax":"swift"},{"type":"heading","text":"Using Plugins","level":2,"anchor":"Using-Plugins"},{"type":"paragraph","inlineContent":[{"text":"Plugins extend the functionality of your network requests:","type":"text"}]},{"type":"heading","text":"Logging Plugin","level":3,"anchor":"Logging-Plugin"},{"type":"codeListing","code":["let loggingPlugin = LoggingPlugin(logger: ConsoleLogger(level: .info))","let provider = NetworkProvider<UserEndpoint>(plugins: [loggingPlugin])","","\/\/ All requests will now be logged","let users: [User] = try await provider.request(UserEndpoint(), as: [User].self)"],"syntax":"swift"},{"type":"heading","text":"Custom Plugin","level":3,"anchor":"Custom-Plugin"},{"type":"codeListing","code":["class AuthenticationPlugin: NetworkPlugin {","    func willSend(_ request: URLRequest, target: Endpoint) {","        \/\/ Add authentication headers","        var modifiedRequest = request","        modifiedRequest.setValue(\"Bearer \\(getToken())\", forHTTPHeaderField: \"Authorization\")","    }","    ","    func didReceive(_ result: Result<(Data, URLResponse), Error>, target: Endpoint) {","        \/\/ Handle authentication errors","        if case .failure(let error) = result {","            \/\/ Handle token refresh, etc.","        }","    }","    ","    private func getToken() -> String {","        \/\/ Return current authentication token","        return \"your-token\"","    }","}","","let authPlugin = AuthenticationPlugin()","let provider = NetworkProvider<UserEndpoint>(plugins: [authPlugin])"],"syntax":"swift"},{"type":"heading","text":"Best Practices","level":2,"anchor":"Best-Practices"},{"type":"heading","text":"1. Reuse Network Providers","level":3,"anchor":"1-Reuse-Network-Providers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create network providers once and reuse them:"}]},{"type":"codeListing","code":["class NetworkService {","    private let provider: NetworkProvider<UserEndpoint>","    ","    init() {","        self.provider = NetworkProvider<UserEndpoint>(","            plugins: [LoggingPlugin(logger: ConsoleLogger(level: .info))]","        )","    }","    ","    func fetchUsers() async throws -> [User] {","        return try await provider.request(UserEndpoint(), as: [User].self)","    }","}"],"syntax":"swift"},{"type":"heading","text":"2. Use Type-Safe Endpoints","level":3,"anchor":"2-Use-Type-Safe-Endpoints"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Leverage Swift’s type system for better safety:"}]},{"type":"codeListing","code":["\/\/ Good: Type-safe endpoint","struct UserEndpoint: Endpoint {","    let baseURL = URL(string: \"https:\/\/api.example.com\")!","    let path = \"\/users\"","    \/\/ ... other properties","}","","\/\/ Avoid: String-based URLs","let url = \"https:\/\/api.example.com\/users\" \/\/ Less type-safe"],"syntax":"swift"},{"type":"heading","text":"3. Handle Errors Appropriately","level":3,"anchor":"3-Handle-Errors-Appropriately"},{"type":"paragraph","inlineContent":[{"text":"Provide meaningful error handling:","type":"text"}]},{"type":"codeListing","code":["enum NetworkServiceError: Error {","    case invalidResponse","    case serverError(Int)","    case networkError(Error)","}","","func fetchUsers() async throws -> [User] {","    do {","        return try await provider.request(UserEndpoint(), as: [User].self)","    } catch NetworkError.serverError(let statusCode, _) {","        throw NetworkServiceError.serverError(statusCode)","    } catch {","        throw NetworkServiceError.networkError(error)","    }","}"],"syntax":"swift"},{"type":"heading","text":"Next Steps","level":2,"anchor":"Next-Steps"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you understand the basics, explore these advanced topics:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"doc:Endpoints","type":"text"},{"text":" - Learn more about endpoint patterns","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:RequestModifiers","type":"text"},{"text":" - Discover all available modifiers","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:Plugins"},{"type":"text","text":" - Create custom plugins"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:EnterpriseFeatures","type":"text"},{"text":" - Use enterprise-grade features","type":"text"}]}]}]}],"kind":"content"}],"references":{"doc://Network/documentation/Network":{"url":"\/documentation\/network","role":"collection","identifier":"doc:\/\/Network\/documentation\/Network","abstract":[],"type":"topic","kind":"symbol","title":"Network"}}}